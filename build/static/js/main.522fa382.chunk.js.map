{"version":3,"sources":["DragArea.js","App.js","registerServiceWorker.js","index.js"],"names":["DragArea","props","className","hover","type","onDragOver","onDrop","onDragLeave","labelContent","App","state","rosterHover","scheduleHover","rosterContent","scheduleContent","editedScheduleContent","submitFiles","fetch","method","headers","body","JSON","stringify","roster","schedule","then","res","json","setState","editedSchedule","document","getElementById","click","onRosterDrop","e","preventDefault","dataTransfer","items","fileReader","FileReader","onload","data","currentTarget","result","kind","file","getAsFile","readAsText","onRosterDragOver","onRosterDragLeave","onScheduleDrop","onScheduleDragOver","onScheduleDragLeave","rosterLabelContent","this","scheduleLabelContent","disabled","onClick","id","href","encodeURIComponent","style","display","download","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.522fa382.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DragArea = props => {\n  return (\n    <div\n      className={\n        props.hover ? `${props.type} hover` : `${props.type}`\n      }\n      onDragOver={props.onDragOver}\n      onDrop={props.onDrop}\n      onDragLeave={props.onDragLeave}\n    >\n      <p>{props.labelContent}</p>\n    </div>\n  );\n};\n\nexport default DragArea;\n","import React, { Component } from \"react\";\nimport DragArea from \"./DragArea\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    rosterHover: false,\n    scheduleHover: false,\n    rosterContent: \"\",\n    scheduleContent: \"\",\n    editedScheduleContent: \"\"\n  };\n\n  submitFiles = () => {\n    fetch(\"api/submit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        roster: this.state.rosterContent,\n        schedule: this.state.scheduleContent\n      })\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState(\n          {\n            editedScheduleContent: res.editedSchedule\n          },\n          () => {\n            document.getElementById(\"download\").click();\n          }\n        );\n      });\n\n    this.setState({\n      rosterContent: \"\",\n      scheduleContent: \"\"\n    });\n  };\n\n  onRosterDrop = e => {\n    e.preventDefault();\n    this.setState({ rosterHover: false });\n\n    if (e.dataTransfer.items) {\n      let fileReader = new FileReader();\n\n      fileReader.onload = data => {\n        const res = data.currentTarget.result;\n        this.setState({ rosterContent: res });\n      };\n\n      if (e.dataTransfer.items[0].kind === \"file\") {\n        let file = e.dataTransfer.items[0].getAsFile();\n        fileReader.readAsText(file);\n      }\n    }\n  };\n\n  onRosterDragOver = e => {\n    e.preventDefault();\n    this.setState({ rosterHover: true });\n  };\n\n  onRosterDragLeave = e => {\n    e.preventDefault();\n    this.setState({ rosterHover: false });\n  };\n\n  onScheduleDrop = e => {\n    e.preventDefault();\n    this.setState({ scheduleHover: false });\n\n    if (e.dataTransfer.items) {\n      let fileReader = new FileReader();\n\n      fileReader.onload = data => {\n        const res = data.currentTarget.result;\n        this.setState({ scheduleContent: res });\n      };\n\n      if (e.dataTransfer.items[0].kind === \"file\") {\n        let file = e.dataTransfer.items[0].getAsFile();\n        fileReader.readAsText(file);\n      }\n    }\n  };\n\n  onScheduleDragOver = e => {\n    e.preventDefault();\n    this.setState({ scheduleHover: true });\n  };\n\n  onScheduleDragLeave = e => {\n    e.preventDefault();\n    this.setState({ scheduleHover: false });\n  };\n\n  render() {\n    const rosterLabelContent = this.state.rosterContent\n      ? \"✔️ Roster\"\n      : \"Drag roster here\";\n    const scheduleLabelContent = this.state.scheduleContent\n      ? \"✔️ Schedule\"\n      : \"Drag schedule here\";\n\n    return (\n      <div className=\"App\">\n        <DragArea\n          type=\"roster\"\n          onDragOver={this.onRosterDragOver}\n          onDrop={this.onRosterDrop}\n          onDragLeave={this.onRosterDragLeave}\n          hover={this.state.rosterHover}\n          labelContent={rosterLabelContent}\n        />\n        <DragArea\n          type=\"schedule\"\n          onDragOver={this.onScheduleDragOver}\n          onDrop={this.onScheduleDrop}\n          onDragLeave={this.onScheduleDragLeave}\n          hover={this.state.scheduleHover}\n          labelContent={scheduleLabelContent}\n        />\n\n        <button\n          className=\"submit\"\n          disabled={!this.state.rosterContent || !this.state.scheduleContent}\n          onClick={this.submitFiles}\n        >\n          Submit\n        </button>\n\n        <a\n          id=\"download\"\n          href={`${\"data:text/plain;charset=utf-8,\"}${encodeURIComponent(\n            this.state.editedScheduleContent\n          )}`}\n          style={{ display: \"none\" }}\n          download=\"EditedSchedule.html\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}